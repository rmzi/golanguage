Chapter 1
---------

Install go.

Q1:
	1. go doc hash/fnv


Chapter 2 : Basics
-------------------

  - goroutine: functions running as lightweight threads
  - channels: method of communicaition between goroutines
  - Go has explicit casting and strict rules about type conversion
  - Postfix types: types go after varible names
  - Erlang shares features with Go, though Go is nearly-functional, compiled, and feels like Unix.
  - Every Go file starts with a package. main is used for stand-alone executables.
  - Comments are // for single line and /* */ for multi-line
  - All Go files in the same package will be compiled together

  [ Variables, types and keywords ]
  - Variables of a particular type are assigned "natural" null values
  	- a int = 0
  	- b string = ""
  	- etc
  - Declaring and Assigning can occur in the same step
    - a := 15 (int)
    - b := false (bool)
    - !! This form may only be used INSIDE functions !!
    - Go deduces the type from the value
    - They can be grouped as follows:
      - a, b := 20, 16
    - The underscore (_) is used to discard values
      - _, b := 34, 35
      - 34 is discarded, b int = 35
    - Declared but unused variables in the code will lead to a compile error.
    - int32 and int are distinct types. Illegal mixing will lead to a compile error.
    - Constants are constants. Int, string, or bool
    - iota is a increment-on-assignment constant. 
    	
    	const (
        a = iota : a int = 0
        b = iota : b int = 1  // you can omit "= iota"															// and it will work.
      )

    - Strings are a basic type. <[finally!]>
    - They are a sequence of UTF-8 characters enclosed in double quotes ("")
    - Assign them thusly: s := "Hello World!"
    - Strings in go are immutable.
    - To perform (this) is illegal
        
        var s sring = "hello"
        s[0] = 'c'
    
    - Instead

    	s := "hello"		// assign "hello" to s
    	c := []rune(s)  // convert s into array of runes (dope!)
    	c[0] = 'c'			// change char to c
    	s2 := string(c) // assign "cello" to s2

    - Multi-line strings

    	s := "Starting part"  will compile into   s:= "SP";
    			+ "Ending Part "                         + "EP";

    	ILLEGAL!
    - Instead

    	s := "Starting part" +
    			 "Ending part"

    - or, use raw string literals using back quotes (`)
      - raw string literals are composed of the uniterpreted characters between the quotes

      s := `Starting part  // This now contains a newline
            Ending Part`

    - Runes
      - Rune is an alias for int32
      - Use rune to access characters

    - Complex numbers are defined thusly

    	var c complex64(or 128) = 9 + 4i

    - Errors have their own type, error. i.e. var e error [default = nil]

  [ Control Structures]

  - There is no do or while loop in Go, only for.
  - Doesn't require parenthesis, but body must always be in brackets

  	if x > 0 {
  		return y
  	} else {
  		return x
  	}

  - You can also set up local variables in if statements, similar to a for loop

  	if err := Chmod(0664); err != nil { // nil = null
  		fmt.Printf(err)			// Scope of err is only if body
  		return err
  	}

  - No need to add the else case if body ends in break, continue, goto, or return

    f, err := os.Open(name, os.O_RDONLY, 0)
    if err != nil {
    	return err
    }
    d, err := f.Stat()
    if err != nil {
    	return err
    }
    doSomething(f,d)

  - Use this type of structure to catch errors as they arise
  
  - <Goto>:

  	func myfunc() {
  		i := 0
  	Here:     <-- Label: (used in goto call), case sensitive
  		println(i)
  		i++
  		goto Here  <-- goto call
  	}

  - <For>

  	for init; condition; post { } // Like C
  	for condition { }							// Like a while
  	for { }												// Endless Loop <-- sweet

    Ex:
      sum := 0
      for i := 0; i < 10; i++ {
      	sum += i 									// i doesn't exist
      }  													// after loop finishes

  - Multiple variables

    // Reverse a (runes?)
    for i, j := 0, len(a) - 1; i < j; i,j = i + 1, j - 1 {
    	a[i], a[j] = a[j], a[i]
    }

  - Break

  	J: for j := 0; j < 5; j++ {
  		for i := 0; i < 10; i++ {
  			if i > 5 {
  				break J        					// Breaks loop w/ label J
  			}
  			println(i)
  		}
  	}

  - Continue

  	for i := 0; i < 10; i++ {
  		if i > 5 {
  			continue 									// Skip the rest of code
  		}														// begin next loop step
  		println(i)
  	}

  - Range

  	- You can use for loops to iterate over a variety of things: strings, slices, arrays, maps, and channels. Range is an iterator that returns the next key-value pair for the thing it's looping over. 

  	Ex:
  		list := []string{"a","b","c","d","e","f"}
  		for k, v := range list {
  			// ballOut(k,v)
  		}

  - When using range on strings, the output is the key-value pair (byte_position, character)
    - Some UTF-8 characters can be up to 32-bit, so they're not always one byte each.

  - Switch
  	- Cases are evaluated top to bottom and can contain anything

  	- fallthrough

  	  switch i {
  	  	case 0:  // fallthrough: if you include fallthrough
  	  	case 1:  // f() will run when i == 0
  	  		f()
  	  }

  [ Built-in Functions]
   
  - run:

    go doc builtin 

   to read the online documentation about builtin types and functions

 [ Arrays, Slices, and Maps]

 - Multiple values in a list: 
   - array, slice
   - map: dictionary, or hash

 [ Arrays ]
	 - Definition:
	   - [n]<type>

	     var arr [10]int
	     arr[0] = 42
	     arr[1] = 13
	     fmt.Printf("The first element is %d\n, arr[0]")

	   - Arrays declared this way are of *fixed* size
	   - Assigning one array to another copies all of the elements
	     - When passing an array to a function, a copy is passed, not a pointer to it

	 - Declaring an array:

	    a := [3]int{1, 2, 3} 
	    				
	    a := [...]int{1, 2, 3} 	// This counts the # of elements

	    a := [2][2]int{ {1,2}, {3,4} }  // Multiple dimensions
	 
 - [ Slices ]

   - Slices point to underlying arrays
   - Assignment of slices points one slice to the same array as another
   - Slices have a len and a cap. len(array) == cap(slice), but len(slice) is # of elements currently in slice

   slice := a[:] is equivalent to a[0:len(a)]

   - Trying to access an index beyond the capacity of a slice throws a runtime error
   - "append" appends zero or more values x to a slice s and returns the resulting slice w/ the same type as s. This may refer to a different array.
   - "copy" copies slice elements from a src to a dst and returns the number of elements copied. numElements = min(len(src), len(dst))

 - [ Maps ]

 	brothersage := map[string]int{
 		"Rami": 24, "Nabil": 19,				// Need trailing comma !
 	}

Chapter 3: 
----------------------